Polimorphism:
is the ability of a method to behave(povodytysya) differently depending upon
the object or parameters that we pass to a method.
Whe we pass different parameters to a method and if behaves differently
then it is called static polimorphism or compiler time or early
binding(ranne zv'yazyvannya)
When we achieve(dosyahaemo) polimorphism through method overriding then it is called
dynamic binding or run time polimorphism or late binding.

Why we should use it:
1. cleaner code
2. we never prefer to change the existing code if we want to improve something
we always want to create new method and new classes, we can call these methods using the parent
classes variable/reference
3. we can call multiple method form many classes with the help of a single variable. we can create the array of object and with the help
of a loop will be able to call the method from all the classes

How can we use:
1. create a parent child relationship
2. override the method in the child class
3.create arr of all the child class objects and with the help of the loop you can call all the method
from all the child class

Rules:
1.All the rules that apply for overriding also apply for the polimorphism
2. we can store the object of a child class inside a reference variable of type parent class but
we cant do the reverse
3. we camn create array of type parent and they can call


What is abstraction:
Abstract is providing only the necessarry details by hiding all the implementation details

Why we should learn Abstraction:
1. it reduces the complexity
2.it helps use enforce rules and convey our requirement
3
How we can use Abstractions:
1. create classes with abstract keyword
2. use the abstract keyword with method header and don't provide the body of that
method inside the parent class
3. create the child classes and extend those classes from the parent
class and implement the abstract methods
4. if we don't want to provide the implementation one or more methods
we can declare the child class as abstract as well

There are two types of classes:
1.Abstract -declared with abstract keyword and can contain define methods
and undefined method
An object of abstract can not be created directly, but it can be created indirectly.
Vehicle obj=new Bike();// indirect object created.

WebDriver v=new Chrome();
Chrome chrome=(Chrome)v;
double num=10.0;
int num2=(int)num;
2.Concrete-